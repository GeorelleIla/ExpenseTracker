import javax.swing.*;
import java.awt.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.renderer.category.BarRenderer;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.sql.SQLException;
import java.util.HashMap;

public class BarGraph extends JFrame {

    private static final long serialVersionUID = 1L;
    private Map<String, Integer> monthlyExpenses;
    private Map<String, Integer> monthlyIncome;

    public BarGraph(Map<String, Integer> monthlyExpenses, Map<String, Integer> monthlyIncome) {
        this.monthlyExpenses = monthlyExpenses;
        this.monthlyIncome = monthlyIncome;

        setTitle("Monthly Finance Tracker");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        generateBarGraph();
    }

    private void generateBarGraph() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        double totalExpenses = 0;
        double totalIncome = 0;

        // List of months in order
        List<String> months = new ArrayList<>();
        Collections.addAll(months, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

        // Populate the dataset
        for (String month : months) {
            double expense = monthlyExpenses.getOrDefault(month, 0);
            double income = monthlyIncome.getOrDefault(month, 0);

            dataset.addValue(expense, "Expenses", month);
            dataset.addValue(income, "Income", month);

            totalExpenses += expense;
            totalIncome += income;

            // Calculate savings
            double saved = income - expense;
            dataset.addValue(saved, "Saved", month);
        }

        double totalSavings = totalIncome - totalExpenses;

        JFreeChart chart = ChartFactory.createBarChart(
                "2024 Finance Report",
                "Month",
                "Amount",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // Customizing the plot background color
        Plot plot = chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE); // Set the plot area background to white

        // Customizing the chart background color
        chart.setBackgroundPaint(new Color(172, 217, 230)); // Set the chart background to light gray-blue

        // Customizing the bars
        CategoryPlot categoryPlot = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) categoryPlot.getRenderer();
        renderer.setSeriesPaint(0, new Color(254, 214, 0)); // Expenses (Yellow)
        renderer.setSeriesPaint(1, new Color(0, 128, 128)); // Income (Teal)
        renderer.setSeriesPaint(2, new Color(34, 139, 34)); // Saved (Green)

        ChartPanel chartPanel = new ChartPanel(chart);

        JPanel totalPanel = new JPanel();
        totalPanel.setLayout(new GridLayout(1, 3));
        totalPanel.add(new JLabel("Total Expenses: " + String.format("%.2f", totalExpenses)));
        totalPanel.add(new JLabel("Total Income: " + String.format("%.2f", totalIncome)));
        totalPanel.add(new JLabel("Total Savings: " + String.format("%.2f", totalSavings)));

        add(totalPanel, BorderLayout.NORTH);
        add(chartPanel, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        ExpenseTracker tracker = new ExpenseTracker();
        Map<String, Integer> expenses = new HashMap<>();
        Map<String, Integer> income = new HashMap<>();

        // Fetch data from database
        try {
            for (String month : List.of("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) {
                // Fetch expenses for the month
                expenses.put(month, tracker.getTotal(month));

                // Fetch income (budget) for the month
                Map<String, Integer> budget = tracker.getBudget(month);
                income.put(month, budget != null ? budget.getOrDefault("amount", 0) : 0);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error fetching data from database. Please ensure database is configured correctly.");
        }

        // Launch the bar graph
        BarGraph barGraph = new BarGraph(expenses, income);
        barGraph.setVisible(true);
    }
}

